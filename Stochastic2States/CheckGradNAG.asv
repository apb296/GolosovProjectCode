% Inputs - xInit, state variables - bdiff, u_1,u_2,s_, coeff, value
% function, para
function [PolicyRules, V_new,exitflag,errValue]=CheckGradNAG(u2bdiff,RR,s,c,VV,xInit,Para)
global V Vcoef R u2btild Par s_ flagCons

%Get the initial guess for the uconstraint problem. With the simplification
%we need only c1_1,c1_2and c2_1

xInit=xInit(1:3);

errValue=0;
Para.theta=[Para.theta_1 Para.theta_2];
Para.alpha=[Para.alpha_1 Para.alpha_2];
Par=Para;
u2btild=u2bdiff;
R=RR;
Vcoef{1}=c(1,:)';
Vcoef{2}=c(2,:)';
V=VV;
s_=s;
u2btildLL=Para.u2btildLL;
u2btildUL=Para.u2btildUL;
ctol=Para.ctol;

%% Now solve the unconstraint problem FOC using NAG
% use the last solution
warning('off', 'NAG:warning')
[x, fvec,exitflag]=c05nb('BelObjectiveUncondGradNAG2',xInit);
if exitflag==4
    exitflag=-2;
else
    exitflag=1;
end
gamma = Par.gamma;
sigma = Par.sigma;
beta =  Par.beta;
P = Par.P;
theta_1 = Par.theta(1);
theta_2 = Par.theta(2);
g = Par.g;
alpha = Par.alpha;
c1_1=x(1);
c1_2=x(2);
c2_1=x(3);
%compute components from unconstrained solution
frac = (R*P(s_,1)*c1_1^(-sigma)+R*P(s_,2)*c1_2^(-sigma)-P(s_,1)*c2_1^(-sigma))...
    /( P(s_,2) );
c2_2 = frac^(-1/sigma);
l1(1) = (c1_1+c2_1+g(1))/theta_1;

l1(2) = (c1_2+c2_2+g(2))/theta_1;
Eu2 = P(s_,1)*c2_1^(-sigma)+P(s_,2)*c2_2^(-sigma);

%compute btildeprime from formula
btildprime(1) = u2btild/(beta*Eu2)...
    +c1_1-c2_1-l1(1)^(1+gamma)/c1_1^(-sigma);
%Compute btildprime(2) from formula
btildprime(2) = u2btild/(beta*Eu2)+c1_2-c2_2-l1(2)^(1+gamma)/c1_2^(-sigma);
u2btildprime=[c2_1^(-sigma) c2_2^(-sigma)].*btildprime;

X(1,:) = [c2_1^(-sigma)*btildprime(1),c2_1^(-sigma)/c1_1^(-sigma)];%state next period
X(2,:) = [c2_2^(-sigma)*btildprime(2),c2_2^(-sigma)/c1_2^(-sigma)];%state next period

% Compute the guess for the multipliers of the constraint problem
dV_x=[funeval(Vcoef{1},V(1),[u2btild R],[1 0])];
dV_R=[funeval(Vcoef{1},V(1),[u2btild R],[0 1])];
Lambda_I0=-dV_x*u2btild*beta;
Lambda_B0=-dV_R;
Lambda_R0 = -P(s_,:).*[c1_1(1)^(-sigma) c1_2^(-sigma)];
MultiplierGuess=[Lambda_I0 Lambda_I0 Lambda_B0 Lambda_R0];
xInit=[c1_1 c1_2 c2_1 c2_2 l1(1) l1(2) u2btildprime(1) u2btildprime(2) MultiplierGuess];

% set flagCons to interior solution
 flagCons='Int';
 
 
 
 % Check the upper limits
 % if upper limit binds for state 1 only
if u2btildprime(1)> u2btildUL && u2btildprime(2)< u2btildUL
    flagCons='UL_';
      xInit=[c1_1 c1_2 c2_1 c2_2 l1(1) l1(2) 1 u2btildprime(2) MultiplierGuess];

end
% if upper limit binds for state 2 only
if u2btildprime(1) < u2btildUL && u2btildprime(2)>u2btildUL
    flagCons='_UL';
      xInit=[c1_1 c1_2 c2_1 c2_2 l1(1) l1(2) u2btildprime(1) 1 MultiplierGuess];

end
% if upper limit binds for both the states
if u2btildprime(1)> u2btildUL && u2btildprime(2) > u2btildUL
    flagCons='ULUL';
      xInit=[c1_1 c1_2 c2_1 c2_2 l1(1) l1(2) 1 1 MultiplierGuess];

end

% Check the lower limits
% if lower limit binds for state 1 only  
if u2btildprime(1)< u2btildLL && u2btildprime(2)> u2btildLL
    flagCons='LL_';
    xInit=[c1_1 c1_2 c2_1 c2_2 l1(1) l1(2) 1 u2btildprime(2) MultiplierGuess];
end
% if lower limit binds for state 2 only  
if u2btildprime(1) > u2btildLL && u2btildprime(2) <u2btildLL
    flagCons='_LL';
    xInit=[c1_1 c1_2 c2_1 c2_2 l1(1) l1(2) u2btildprime(1) 1 MultiplierGuess];
end
% if lower limit binds for both the states
if u2btildprime(1) < u2btildLL && u2btildprime(2) <u2btildLL
    flagCons='LLLL';
      xInit=[c1_1 c1_2 c2_1 c2_2 l1(1) l1(2) 1 1 MultiplierGuess];

end

if ~strcmpi(flagCons,'Int') 
    
    warning('off', 'NAG:warning')
[x, fvec,exitflag]=c05nb('resFOC',xInit);
if exitflag==4
    exitflag=-2;
else
    exitflag=1;
end
    % solve for the constrainted problem
  %  options = optimset('Display','off','TolFun',ctol,'FunValCheck','off','TolX',ctol,'MaxFunEvals', 100*length(xInit),'MaxTime',100);
   % [x fval exitflag] =fsolve(@(x) resFOC(x,u2btild,R,c,s_,V,flagCons,Para),xInit,options)  ;
    MuU=zeros(1,2);
MuL=zeros(1,2);
    c1_1=x(1); %consumption of agent 1 state 1
    c1_2=x(2); %consumption of agent 1 state 2
    c2_1=x(3);  %consumption of agent 2 state 1
    c2_2=x(4); %consumption of agent 2 state 2
    l1(1)=x(5); %labor supply of agent 1 state 1
    l1(2)=x(6); %labor supply of agent 1 state 2
    
    switch flagCons
    case 'LL_'
       % lower limit binds for state 1 only
       MuL(1)=x(7);
       MuL(2)=0;
       u2btildprime(1)=u2btildLL;
       u2btildprime(2)=x(8);
       
    case '_LL'
       % lower limit binds for state 2 only
       MuL(1)=0;
       MuL(2)=x(8);
       u2btildprime(1)=x(7);
       u2btildprime(2)=u2btildLL;
       
    case 'LLLL'
      % lower limit binds for both the states
       MuL(1)=x(7);
       MuL(2)=x(8);
       u2btildprime(1)=u2btildLL;
       u2btildprime(2)=u2btildLL;     
        
        
        
    case 'UL_'
     % upper limit binds for state 1 only

       MuU(1)=x(7);
       MuU(2)=0;
       u2btildprime(1)=u2btildUL;
       u2btildprime(2)=x(8);
       
        
    case '_UL'
         % upper limit binds for state 2 only
       MuU(1)=0;
       MuU(2)=x(8);
       u2btildprime(1)=x(7);
       u2btildprime(2)=u2btildUL;
        
        
    case 'ULUL'
        
        
       % upper limit binds for both the states
       MuL(1)=x(7);
       MuL(2)=x(8);
       u2btildprime(1)=u2btildUL;
       u2btildprime(2)=u2btildUL;     
        
        
        
    end
    
    X(1,:) = [u2btildprime(1),c2_1^(-sigma)/c1_1^(-sigma)];%state next period
    X(2,:) = [u2btildprime(2),c2_2^(-sigma)/c1_2^(-sigma)];%state next period
    Lambda=x(9:13);
    if exitflag==1
  [errValue,errMultiplier]=CompareFOCwithOptimizer(u2btild,R,s_,Vcoef,V,Para,[c1_1 c1_2 c2_1 c2_2 l1 u2btildprime],Lambda,MuL,MuU)  ;
    end
end





%compute objective
Vobj = P(s_,1)*(alpha(1)*u(c1_1,l1(1),sigma,gamma)+alpha(2)*u(c2_1,0,sigma,gamma)...
    +beta*funeval(Vcoef{1},V(1),X(1,:)));

Vobj = Vobj + P(s_,2)*(alpha(1)*u(c1_2,l1(2),sigma,gamma)+alpha(2)*u(c2_2,0,sigma,gamma)...
    +beta*funeval(Vcoef{2},V(2),X(2,:)));

V_new=Vobj;
PolicyRules=[c1_1 c1_2 c2_1 c2_2 l1(1) l1(2) btildprime c2_1^(-sigma)/c1_1^(-sigma) c2_2^(-sigma)/c1_2^(-sigma) u2btildprime(1) u2btildprime(2)];


end

% Knitro verification
function [errValue,errMultiplier]=CompareFOCwithOptimizer(u2btild,R,s_,Vcoef,V,Para,PolicyRulesFOC,~,MuL,MuU)
opts = optimset('Algorithm', 'interior-point', 'Display','off', ...
    'GradObj','off','GradConstr','off',...
    'MaxIter',1000, ...
    'TolX', Para.ctol/10, 'TolFun', Para.ctol, 'TolCon', Para.ctol,'MaxTime',200);
lb=[0.001 0.001 0.001 .001 Para.g(1)/Para.theta_1 Para.g(2)/Para.theta_1 Para.u2btildLL Para.u2btildLL];
ub=[Inf Inf Inf Inf Inf Inf Para.u2btildUL Para.u2btildUL];

[PolicyRules,fval,exitflag,output,lambda]  =fmincon(@(x) ValueFunction(x,u2btild,R,Vcoef,s_,V,Para),PolicyRulesFOC,[],[],[],[],lb,ub,@(x) NonLinearConstraints(x,u2btild,R,s_,Para),opts);
if exitflag==1
    disp('Percentage error in value')
errValue=(ValueFunction(PolicyRulesFOC,u2btild,R,Vcoef,s_,V,Para)-fval)/ValueFunction(PolicyRulesFOC,u2btild,R,Vcoef,s_,V,Para);
disp(errValue)
errMultiplier=[-sum(MuL)-sum(lambda.lower) sum(MuU)-sum(lambda.upper)];
else
    errValue=NaN;
    errMultiplier=NaN;
end
end
